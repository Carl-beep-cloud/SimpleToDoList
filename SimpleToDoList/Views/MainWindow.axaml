<!-- Leave the root-Node untouched beside setting Width, Height and Padding -->
<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:SimpleToDoList.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Width="300" Height="500" Padding="4"
        x:Class="SimpleToDoList.Views.MainWindow"
        x:DataType="vm:MainWindowViewModel"
        Icon="/Assets/avalonia-logo.ico"
        Title="SimpleToDoList">
	<!-- We give a name to the root grid in order to access it later -->
	<Grid RowDefinitions="Auto,Auto, *, Auto" Background="black"
          x:Name="Root">

		<!-- This is our title text block.  -->
		<TextBlock Grid.Row="0" Classes="h1" Text="Min Episka trÃ¤nings lista" Background="pink" />
		<Grid Grid.Row="1" ColumnDefinitions="2*, 1.25*, 1.25*, 0.67*, 0.44*" Margin="5">
			<TextBlock Classes="underheader" Grid.Column="0">Exericise</TextBlock>
			<TextBlock Classes="underheader" Grid.Column="1" >Weight</TextBlock>
			<TextBlock Classes="underheader" Grid.Column="2" >Reps</TextBlock>
			<TextBlock Classes="underheader" Grid.Column="3" >Result</TextBlock>
			<TextBlock Classes="underheader"  Grid.Column="4">Delete</TextBlock>
		</Grid>		   
		<ScrollViewer Grid.Row="2" Background="" Margin="">
			<!-- This ItemsControl show all added ToDoItems. -->
			<!-- It needs to be placed inside a ScrollViewer because other than a ListBox it has not its own -->
			<ItemsControl ItemsSource="{Binding ToDoItems}" >
				<ItemsControl.ItemTemplate>
					<!--  The ItemTemplate defines how each item should be represented  -->
					<!--  Our Item will be represented by a CheckBox and a Delete-Button  -->
					<DataTemplate DataType="vm:ToDoItemViewModel">
						<Grid ColumnDefinitions="1.5*, 1*, 1*, 0.67*, 0.44*" Margin=""  Background="Gray">

							<TextBlock Grid.Column="0" VerticalAlignment="Center"   FontWeight="Bold" Text="{Binding Content}"></TextBlock>
							
							<StackPanel Grid.Column="1" Margin="2">
								<NumericUpDown Value="15" />
							</StackPanel>

							<StackPanel Grid.Column="2"  Margin="2">
								<NumericUpDown Value="4" />
							</StackPanel>

							<StackPanel Grid.Column="3" Margin="2">
								<ComboBox SelectedIndex="0" MaxDropDownHeight="100">
									<ComboBoxItem Foreground="Red">Fail</ComboBoxItem>
									<ComboBoxItem Foreground="Green">Success</ComboBoxItem>
									<ComboBoxItem Foreground="Orange" >Skibidi dop dop</ComboBoxItem>
									
								</ComboBox>
							</StackPanel>
							<!--  Note how we use the Root-Grid to get the MainViewModel here. As we use compiled bindings we have to cast the DataContext  -->
							<Button Command="{Binding #Root.((vm:MainWindowViewModel)DataContext).RemoveItemCommand}" BorderBrush="green"
									CommandParameter="{Binding .}"
									Grid.Column="4">
								Delete
							</Button>
						</Grid>
					</DataTemplate>
				</ItemsControl.ItemTemplate>
			</ItemsControl>
		</ScrollViewer>

		<!-- This TextBox can be used to add new ToDoItems -->
		<TextBox Grid.Row="3"
         Text="{Binding NewItemContent}"
         Watermark="Add a new Item">
			<TextBox.InnerRightContent>
				<Button Command="{Binding AddItemCommand}" >
					SKibid
					<!--<PathIcon Data="{DynamicResource AcceptIconData}" Foreground="Green" /> -->
				</Button>
			</TextBox.InnerRightContent>
			<!--  KeyBindings allow us to define keyboard gestures  -->
			<TextBox.KeyBindings>
				<KeyBinding Command="{Binding AddItemCommand}" Gesture="Enter" />
			</TextBox.KeyBindings>
		</TextBox>
	</Grid>
</Window>